#!/usr/bin/env bash
set -euo pipefail

PLATFORM="$(uname)"

# Implement sed -i (with no extension) in a cross-platform manner
function sed_i {
    if [[ "$PLATFORM" == "Linux" ]]; then
        sed -i "$@"
    else
        sed -i "" "$@"
    fi
}

# Define an end-of-line sequence for cross-platform compatibility
# echo interprets escape sequences differently on different platforms
EOL=$'\n'

# DATE_VAR get the current date in YYYY-MM-DD format
DATE_VAR="$(date '+%F')"

# TAG_ANNOTATION_FILE is the file edited by the tagger containing the tag annotation content
TAG_ANNOTATION_FILE="artifacts/changelog/TAG_ANNOTATION.md"

# TAG_ANNOTATION_SNAPSHOT_FILE keeps a snapshot of the original tag annotation content to determine if changes are made
TAG_ANNOTATION_SNAPSHOT_FILE="artifacts/changelog/TAG_ANNOTATION_SNAPSHOT.md"

# CHANGELOG_ADDITIONS_FILE contains the changes to insert into CHANGELOG.md after editing
CHANGELOG_ADDITIONS_FILE=artifacts/changelog/CHANGELOG_ADDITIONS.md

# Ensure the working directory exists
mkdir -p artifacts/changelog

# Build the initial CHANGELOG.md section in the editor
#
# Add version number to the top of the editor
echo "vX.Y.Z" > "$TAG_ANNOTATION_FILE"
# Add the previous git tag to the editor
echo "<!-- Previous tag: $GIT_TAG_LATEST -->" >> "$TAG_ANNOTATION_FILE"

# Add the existing CHANGELOG.md [unreleased] section if file exists
if [ -f CHANGELOG.md ]; then
    # If there is the old [unreleased] section, replace it with ## Unreleased header
    sed_i '/^## \[Unreleased\]/,/[unreleased]/d' CHANGELOG.md

    # If there is no Unreleased section, insert the Unreleased section before the first release section.
    if ! grep -q '## Unreleased' CHANGELOG.md; then
        sed_i $'1,/^## / s/^## /## Unreleased\\\n\\\n## /' CHANGELOG.md
    fi

    sed -e '/^## Unreleased.*/,/^## /!d' CHANGELOG.md | sed '1d;$d' >> "$TAG_ANNOTATION_FILE";
fi

# GIT_LOG gets git log messages since the last tag to the editor
GIT_LOG=$(git log --pretty=format:'- '%s%- --first-parent ..."$(git describe --abbrev=0 2> /dev/null)")

CHANGELOG_ENTRIES_ADDED="$(echo "$GIT_LOG" | { grep -i -E "Add|Implement" || :; })"
CHANGELOG_ENTRIES_CHANGED="$(echo "$GIT_LOG" | { grep -i -E "Change|Migrate|Refactor|Convert|Rename" || :; })"
CHANGELOG_ENTRIES_REMOVED="$(echo "$GIT_LOG" | { grep -i -E "Remove" || :; })"
CHANGELOG_ENTRIES_FIXED="$(echo "$GIT_LOG" | { grep -i -E "Fix|Ensure" || :; })"
CHANGELOG_ENTRIES_DEPRECATED="$(echo "$GIT_LOG" | { grep -i -E "Deprecate" || :; })"
CHANGELOG_ENTRIES_SECURITY="$(echo "$GIT_LOG" | { grep -i -E "Security|Vulnerab" || :; })"
CHANGELOG_ENTRIES_OTHER="$(echo "$GIT_LOG" | { grep -i -E -v "Add|Implement" | grep -i -E -v "Change|Migrate|Refactor|Convert|Rename" | grep -i -E -v "Remove" | grep -i -E -v "Fix|Ensure" | grep -i -E -v "Deprecate" | grep -i -E -v "Security|Vulnerab" || :; })"

echo "<!------------------ Everything past this line will be deleted ----------------------->" >> "$TAG_ANNOTATION_FILE"

echo >> "$TAG_ANNOTATION_FILE"
echo "### Added${EOL}${EOL}${CHANGELOG_ENTRIES_ADDED:-- }${EOL}" >> "$TAG_ANNOTATION_FILE"
echo "### Changed${EOL}${EOL}${CHANGELOG_ENTRIES_CHANGED:-- }${EOL}" >> "$TAG_ANNOTATION_FILE"
echo "### Removed${EOL}${EOL}${CHANGELOG_ENTRIES_REMOVED:-- }${EOL}" >> "$TAG_ANNOTATION_FILE"
echo "### Fixed${EOL}${EOL}${CHANGELOG_ENTRIES_FIXED:-- }${EOL}" >> "$TAG_ANNOTATION_FILE"
echo "### Deprecated${EOL}${EOL}${CHANGELOG_ENTRIES_DEPRECATED:-- }${EOL}" >> "$TAG_ANNOTATION_FILE"
echo "### Security${EOL}${EOL}${CHANGELOG_ENTRIES_SECURITY:-- }${EOL}" >> "$TAG_ANNOTATION_FILE"
echo "### Other${EOL}${EOL}${CHANGELOG_ENTRIES_OTHER:-- }" >> "$TAG_ANNOTATION_FILE"

# replace single quotes with backticks if surrounded by identifier
sed_i -e "s/'\([a-zA-Z0-9-]*\)'/\`\1\`/g" "$TAG_ANNOTATION_FILE"

# If EDITOR is not set, set it to default git editor
if [ -z "${VISUAL:-${EDITOR:-}}" ]; then
    EDITOR="$(git config --global --get core.editor)"
fi
# If EDITOR is still not set, set it to vim
if [ -z "${EDITOR:-}" ]; then
    EDITOR="vim"
fi

# Allow user to edit the log and assign a version number.
# Quit immediately if the user aborts the edit.
cat "$TAG_ANNOTATION_FILE" > "$TAG_ANNOTATION_SNAPSHOT_FILE"
${VISUAL:-$EDITOR} "$TAG_ANNOTATION_FILE"
if diff "$TAG_ANNOTATION_FILE" "$TAG_ANNOTATION_SNAPSHOT_FILE" > /dev/null; then
    echo "No changes made to CHANGELOG.md. Exiting.";
    exit 1;
fi

if [ "$(head -n 1 "$TAG_ANNOTATION_FILE")" = "$(head -n 1 "$TAG_ANNOTATION_SNAPSHOT_FILE")" ]; then
	echo "No new tag set, first line must be changed to reflect the new tag. Exiting."
	exit 1
fi

# Extract the version number from the edited log.
v=$(sed -n 1p "$TAG_ANNOTATION_FILE")

# Remove the GIT_LOG section up to END GIT LOG or the next header if it is not already empty
sed_i '/^<!--* Everything past this line will be deleted -*-->$/,$d' $TAG_ANNOTATION_FILE

# Remove the <!-- Previous tag section -->
sed_i '/^<!--* Previous tag:/d' $TAG_ANNOTATION_FILE

# Build the new section for the CHANGELOG.md file.
echo "${EOL}## [$v] - "$DATE_VAR"${EOL}" > $CHANGELOG_ADDITIONS_FILE
echo "[$v]: $CHANGELOG_TAG_URL_PREFIX$v" >> $CHANGELOG_ADDITIONS_FILE
cat "$TAG_ANNOTATION_FILE" >> $CHANGELOG_ADDITIONS_FILE
sed_i -e '5d' $CHANGELOG_ADDITIONS_FILE # Strip the vX.X.X first line

# Remove existing unreleased section if it is not already empty
sed_i '/^## Unreleased.*/,/^## /{//!d;/## Unreleased/G;}' CHANGELOG.md

# Append the new section to the CHANGELOG.md file under the ## Unreleased section.
sed_i "/^## Unreleased/r $CHANGELOG_ADDITIONS_FILE" CHANGELOG.md

# Remove all double blank lines from the CHANGELOG.md file
sed_i '/^$/N;/^\n$/D' CHANGELOG.md

# Commit the new CHANGELOG.md file.
git add CHANGELOG.md
git commit -am "Bump to $v"

# Create new tag annotated with the new CHANGELOG.md section.
git tag --annotate --cleanup=whitespace -F $TAG_ANNOTATION_FILE $v
