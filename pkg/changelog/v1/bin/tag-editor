#!/usr/bin/env bash
set -euo pipefail

PLATFORM="$(uname)"

# Implement sed -i (with no extension) in a cross-platform manner
function sed_i {
    if [[ "$PLATFORM" == "Linux" ]]; then
        sed -i "$@"
    else
        sed -i "" "$@"
    fi
}

# Define an end-of-line sequence for cross-platform compatibility
# echo interprets escape sequences differently on different platforms
EOL=$'\n'

# DATE_VAR get the current date in YYYY-MM-DD format
DATE_VAR="$(date '+%F')"

# TAG_ANNOTATION_FILE is the file edited by the tagger containing the tag annotation content
TAG_ANNOTATION_FILE="artifacts/changelog/TAG_ANNOTATION.md"

# TAG_ANNOTATION_SNAPSHOT_FILE keeps a snapshot of the original tag annotation content to determine if changes are made
TAG_ANNOTATION_SNAPSHOT_FILE="artifacts/changelog/TAG_ANNOTATION_SNAPSHOT.md"

# CHANGELOG_ADDITIONS_FILE contains the changes to insert into CHANGELOG.md after editing
CHANGELOG_ADDITIONS_FILE=artifacts/changelog/CHANGELOG_ADDITIONS.md

# Ensure the working directory exists
mkdir -p artifacts/changelog

# Build the initial CHANGELOG.md section in the editor
#
# Add version number to the top of the editor
echo "vX.Y.Z" > "$TAG_ANNOTATION_FILE"

# Add the existing CHANGELOG.md [unreleased] section if file exists
if [ -f CHANGELOG.md ]; then
    # If there is the old [unreleased] section, replace it with ## Unreleased header
    sed_i '/^## \[Unreleased\]/,/[unreleased]/d' CHANGELOG.md

    # If there is no Unreleased section, insert the Unreleased section before the first release section.
    if ! grep -q '## Unreleased' CHANGELOG.md; then
        sed_i $'1,/^## / s/^## /## Unreleased\\\n\\\n## /' CHANGELOG.md
    fi

    # Prepend entries in each of the unreleased sections
    UNRELEASED="$(sed -n '/^## Unreleased.*/,/^## /{//!p;}' CHANGELOG.md)"
    CHANGELOG_ENTRIES_ADDED="$(echo "$UNRELEASED" | sed -n '/^### Added.*/,/^### /{//!p;}' | { grep -e '^-' || :; })"
    CHANGELOG_ENTRIES_CHANGED="$(echo "$UNRELEASED" | sed -n '/^### Changed.*/,/^### /{//!p;}' | { grep -e '^-' || :; })"
    CHANGELOG_ENTRIES_DEPRECATED="$(echo "$UNRELEASED" | sed -n '/^### Deprecated.*/,/^### /{//!p;}' | { grep -e '^-' || :; })"
    CHANGELOG_ENTRIES_REMOVED="$(echo "$UNRELEASED" | sed -n '/^### Removed.*/,/^### /{//!p;}' | { grep -e '^-' || :; })"
    CHANGELOG_ENTRIES_FIXED="$(echo "$UNRELEASED" | sed -n '/^### Fixed.*/,/^### /{//!p;}' | { grep -e '^-' || :; })"
    CHANGELOG_ENTRIES_SECURITY="$(echo "$UNRELEASED" | sed -n '/^### Security.*/,/^### /{//!p;}' | { grep -e '^-' || :; })"
    CHANGELOG_ENTRIES_UNCATEGORIZED="$(echo "$UNRELEASED" | sed -n '/^### Uncategorized.*/,/^### /{//!p;}' | { grep -e '^-' || :; })"

    # Add a newline to the end of each section if it is not empty
    [ -n "$CHANGELOG_ENTRIES_ADDED" ] && CHANGELOG_ENTRIES_ADDED+="${EOL}"
    [ -n "$CHANGELOG_ENTRIES_CHANGED" ] && CHANGELOG_ENTRIES_CHANGED+="${EOL}"
    [ -n "$CHANGELOG_ENTRIES_DEPRECATED" ] && CHANGELOG_ENTRIES_DEPRECATED+="${EOL}"
    [ -n "$CHANGELOG_ENTRIES_REMOVED" ] && CHANGELOG_ENTRIES_REMOVED+="${EOL}"
    [ -n "$CHANGELOG_ENTRIES_FIXED" ] && CHANGELOG_ENTRIES_FIXED+="${EOL}"
    [ -n "$CHANGELOG_ENTRIES_SECURITY" ] && CHANGELOG_ENTRIES_SECURITY+="${EOL}"
    [ -n "$CHANGELOG_ENTRIES_UNCATEGORIZED" ] && CHANGELOG_ENTRIES_UNCATEGORIZED+="${EOL}"
fi

# GIT_LOG gets git log messages since the last tag to the editor
GIT_LOG=$(git log --pretty=format:'- '%s%- --first-parent ..."$(git describe --abbrev=0 2> /dev/null)")

ADDED_KEYWORDS="add|implement"
CHANGED_KEYWORDS="change|migrate|refactor|convert|rename"
REMOVED_KEYWORDS="remove|delete|revert"
FIXED_KEYWORDS="bug|fix|ensure|issue"
DEPRECATED_KEYWORDS="deprecate"
SECURITY_KEYWORDS="security|vulnerab"

ALL_KEYWORDS="$ADDED_KEYWORDS|$CHANGED_KEYWORDS|$REMOVED_KEYWORDS|$FIXED_KEYWORDS|$DEPRECATED_KEYWORDS|$SECURITY_KEYWORDS"

CHANGELOG_ENTRIES_ADDED+="$(echo "$GIT_LOG" | { grep -i -E "$ADDED_KEYWORDS" || :; })"
CHANGELOG_ENTRIES_CHANGED+="$(echo "$GIT_LOG" | { grep -i -E "$CHANGED_KEYWORDS" || :; })"
CHANGELOG_ENTRIES_DEPRECATED+="$(echo "$GIT_LOG" | { grep -i -E "$DEPRECATED_KEYWORDS" || :; })"
CHANGELOG_ENTRIES_REMOVED+="$(echo "$GIT_LOG" | { grep -i -E "$REMOVED_KEYWORDS" || :; })"
CHANGELOG_ENTRIES_FIXED+="$(echo "$GIT_LOG" | { grep -i -E "$FIXED_KEYWORDS" || :; })"
CHANGELOG_ENTRIES_SECURITY+="$(echo "$GIT_LOG" | { grep -i -E "$SECURITY_KEYWORDS" || :; })"
CHANGELOG_ENTRIES_UNCATEGORIZED+="$(echo "$GIT_LOG" | { grep -i -E -v "$ALL_KEYWORDS" || :; })"

# Add the changelog sections
echo "${EOL}### Added${EOL}${EOL}${CHANGELOG_ENTRIES_ADDED:-- }" >> "$TAG_ANNOTATION_FILE"
echo "${EOL}### Changed${EOL}${EOL}${CHANGELOG_ENTRIES_CHANGED:-- }" >> "$TAG_ANNOTATION_FILE"
echo "${EOL}### Deprecated${EOL}${EOL}${CHANGELOG_ENTRIES_DEPRECATED:-- }" >> "$TAG_ANNOTATION_FILE"
echo "${EOL}### Removed${EOL}${EOL}${CHANGELOG_ENTRIES_REMOVED:-- }" >> "$TAG_ANNOTATION_FILE"
echo "${EOL}### Fixed${EOL}${EOL}${CHANGELOG_ENTRIES_FIXED:-- }" >> "$TAG_ANNOTATION_FILE"
echo "${EOL}### Security${EOL}${EOL}${CHANGELOG_ENTRIES_SECURITY:-- }" >> "$TAG_ANNOTATION_FILE"

echo "${EOL}<!------------------------------------ >8 --------------------------------------" >> "$TAG_ANNOTATION_FILE"

# Add the previous git tag
echo "${EOL}Previous tag: $GIT_TAG_LATEST" >> "$TAG_ANNOTATION_FILE"

# Add any uncategorized commits
if [ -n "$CHANGELOG_ENTRIES_UNCATEGORIZED" ]; then
    echo "${EOL}Uncategorized commits:${EOL}${EOL}${CHANGELOG_ENTRIES_UNCATEGORIZED}" >> "$TAG_ANNOTATION_FILE"
fi

# replace single quotes with backticks if surrounded by identifier
sed_i -e "s/'\([a-zA-Z0-9-]*\)'/\`\1\`/g" "$TAG_ANNOTATION_FILE"

# If EDITOR is not set, set it to default git editor
if [ -z "${VISUAL:-${EDITOR:-}}" ]; then
    EDITOR="$(git config --global --get core.editor)"
fi
# If EDITOR is still not set, set it to vim
if [ -z "${EDITOR:-}" ]; then
    EDITOR="vim"
fi

open_in_editor() {
  # NOTE: could support other methods too eg. xdg-open or open commands if they exist
  if [ -n "${VISUAL:-}" ]; then
    $VISUAL "$@" || $EDITOR "$@"
  else
    $EDITOR "$@"
  fi
  return $?
}

# Allow user to edit the log and assign a version number.
# Quit immediately if the user aborts the edit.
cat "$TAG_ANNOTATION_FILE" > "$TAG_ANNOTATION_SNAPSHOT_FILE"
open_in_editor "$TAG_ANNOTATION_FILE"
if diff "$TAG_ANNOTATION_FILE" "$TAG_ANNOTATION_SNAPSHOT_FILE" > /dev/null; then
    echo "No changes made to CHANGELOG.md. Exiting.";
    exit 1;
fi

if [ "$(head -n 1 "$TAG_ANNOTATION_FILE")" = "$(head -n 1 "$TAG_ANNOTATION_SNAPSHOT_FILE")" ]; then
	echo "No new tag set, first line must be changed to reflect the new tag. Exiting."
	exit 1
fi

# Extract the version number from the edited log.
v=$(sed -n 1p "$TAG_ANNOTATION_FILE")

# Remove everything after the scissors marker.
sed_i '/^<!--* >8 -*$/,$d' $TAG_ANNOTATION_FILE

# Build the new section for the CHANGELOG.md file.
echo "${EOL}## [$v] - "$DATE_VAR"${EOL}" > $CHANGELOG_ADDITIONS_FILE
echo "[$v]: $CHANGELOG_TAG_URL_PREFIX$v" >> $CHANGELOG_ADDITIONS_FILE
cat "$TAG_ANNOTATION_FILE" >> $CHANGELOG_ADDITIONS_FILE
sed_i -e '5d' $CHANGELOG_ADDITIONS_FILE # Strip the vX.X.X first line

# Find the start of the Unreleased section in the CHANGELOG.md file
UNRELEASED_START_LINE="$(grep -n '^## Unreleased' CHANGELOG.md | cut -d: -f1)"
# Find the line of the first second-level header (##) after Unreleased in the CHANGELOG.md file
INSERT_LINE="$(grep -n '^## ' CHANGELOG.md | cut -d: -f1 | grep -A1 "^${UNRELEASED_START_LINE}$" | tail -n1)"
# Remove from UNRELEASED_START_LINE to the line above INSERT_LINE
sed_i "${UNRELEASED_START_LINE},$((${INSERT_LINE}-1))d" CHANGELOG.md


# Append the new section to the CHANGELOG.md file above the first second-level header (##)
sed_i -e "${INSERT_LINE}r $CHANGELOG_ADDITIONS_FILE" CHANGELOG.md

# Remove all double blank lines from the CHANGELOG.md file
sed_i '/^$/N;/^\n$/D' CHANGELOG.md

# Commit the new CHANGELOG.md file.
git add CHANGELOG.md
git commit -am "Bump to $v"

# Create new tag annotated with the new CHANGELOG.md section.
git tag --annotate --cleanup=whitespace -F $TAG_ANNOTATION_FILE $v
