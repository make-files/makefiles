#!/usr/bin/env bash
set -euo pipefail
source "$(dirname "${BASH_SOURCE[0]}")/../include/common.bash"

if [[ $# < 1 ]]; then
    echo "Usage: git-find pathname ..."
    echo
    echo "  A wrapper around the find command that excludes files ignored by"
    echo "  Git. Only supports a single pathname argument, relative to the"
    echo "  project root. No additional pathnames may be specified with -f."
    echo "  Because Git has no knowledge of directories, this command will only"
    echo "  ever find files, not directories."
    echo
    exit 1
fi

cd "$MF_PROJECT_ROOT"

# git ls-files -- "$1"
#    lists all files in the repository under the specified path, including those
#    in the staging area
# git ls-files --other --exclude-standard -- "$1"
#    lists all untracked files under the specified path, except those ignored by
#    Git
files="$(git ls-files -- "$1"; git ls-files --other --exclude-standard -- "$1")"

# exit normally if there are no files to match
[[ -z "$files" ]] && exit 0

# filter out any non-existent paths to prevent subsequent find calls from
# producing "No such file or directory" errors
files="$(find $files 2>/dev/null || true)"

# exit normally if there are no files to match
[[ -z "$files" ]] && exit 0

find $files "${@:2}"
